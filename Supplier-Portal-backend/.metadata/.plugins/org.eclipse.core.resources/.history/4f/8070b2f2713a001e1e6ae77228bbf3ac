package com.supplierportal.po.entity;

import java.io.IOException;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;

public class poExcelExporter {
	 private XSSFWorkbook workbook;
	 private XSSFSheet sheet;
	 private List<purchaseOrder> listPO;
	 
	 public poExcelExporter(List<purchaseOrder> listPO) {
		// TODO Auto-generated constructor stub
		 this.listPO = listPO;
	        workbook = new XSSFWorkbook();
	}

	
	 
	 private void writeHeaderLine() {
	        sheet = workbook.createSheet("PurchaseOrders");
	         
	        Row row = sheet.createRow(0);
	         
	        CellStyle style = workbook.createCellStyle();
	        XSSFFont font = workbook.createFont();
	        font.setBold(true);
	        font.setFontHeight(16);
	        style.setFont(font);
	         
	        createCell(row, 0, "poId", style);      
	        createCell(row, 1, "location", style);       
	        createCell(row, 2, "creationDate", style);    
	        createCell(row, 3, "poQty", style);
	        createCell(row, 4, "totalItems", style);
	         
	    }
	 
	 private void createCell(Row row, int columnCount, Object value, CellStyle style) {
	        sheet.autoSizeColumn(columnCount);
	        Cell cell = row.createCell(columnCount);
	        if (value instanceof Integer) {
	            cell.setCellValue((Integer) value);
	        } else if (value instanceof Boolean) {
	            cell.setCellValue((Boolean) value);
	        }else {
	            cell.setCellValue((String) value);
	        }
	        cell.setCellStyle(style);
	    }
	 
	 private void writeDataLines() {
	        int rowCount = 1;
	 
	        XSSFCellStyle style = workbook.createCellStyle();
	        XSSFFont font = workbook.createFont();
	        font.setFontHeight(14);
	        style.setFont(font);
	                 
	        for (purchaseOrder purchase : listPO) {
	            XSSFRow row = sheet.createRow(rowCount++);
	            int columnCount = 0;
	             
	            createCell(row, columnCount++, purchase.getPoId(), style);
	            createCell(row, columnCount++, purchase.getLocation(), style);
	            createCell(row, columnCount++, purchase.getCreationDate(), style);
	            createCell(row, columnCount++, purchase.getPoQty().toString(), style);
	            createCell(row, columnCount++, purchase.getTotalItems(), style);
	             
	        }
	    }
	 public void export(HttpServletResponse response) throws IOException {
	        writeHeaderLine();
	        writeDataLines();
	         
	        ServletOutputStream outputStream = response.getOutputStream();
	        workbook.write(outputStream);
	        workbook.close();
	         
	        outputStream.close();
	         
	    }
}
